# Development configuration for Docker Compose
version: '3.8'

services:
  # Main web application service
  web:
    build:
      # Build context is the root directory
      context: .
      # Use the main Dockerfile
      dockerfile: docker/Dockerfile
      args:
        # Set environment to development for proper container setup
        - ENVIRONMENT=development
    ports:
      # Main application port
      - "${PORT:-5001}:5001"
      # Debug port for remote debugging
      - "5678:5678"  # For debugger
    environment:
      # Flask configuration
      - FLASK_APP=app
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      # Python configuration
      - PYTHONDONTWRITEBYTECODE=1  # Don't create .pyc files
      - PYTHONUNBUFFERED=1         # Unbuffered output for logging
      # Application configuration
      - SECRET_KEY=${SECRET_KEY:-default-dev-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:////app/instance/data.db}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - PORT=5001
    volumes:
      # Mount application code for hot reloading
      - .:/app:rw
      # Mount instance directory for persistent data
      - ./instance:/app/instance:rw
      # Cache pip packages between container rebuilds
      - ~/.cache/pip:/home/appuser/.cache/pip  # Cache pip packages
    # Use host user's UID/GID to avoid permission issues
    user: "${UID:-1000}:${GID:-1000}"
    # Restart policy for development
    restart: unless-stopped
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Security options
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"    # Maximum size of log file
        max-file: "3"      # Number of log files to keep
